=================
| SB-201_DAY-03 |
=================

    Inserting a record
    --------------------

        -- In order to perform any DML ( insert update delete ) the method calls should be in a transactional area.

            em.getTransaction(); method return "javax.persistence.EntityTransaction(I) " object.

            This EntityTransaction obj is a singleton object, i.e per EntityManager obj, only one Transaction object is created.

        -- To store the object we need to call persist(-) method on the EM object.


            Example: 


                Demo.java : Insert operation
                ------------------------------

                package com.masai;

                import javax.persistence.EntityManager;
                import javax.persistence.EntityManagerFactory;
                import javax.persistence.Persistence;

                public class Demo {

                    public static void main(String[] args) {
                        
                        EntityManagerFactory emf= Persistence.createEntityManagerFactory("studentUnit");
                        
                        
                        EntityManager em= emf.createEntityManager();
                        
                        Student student= new Student(30, "Ratan", 500);
                        
                        
                //		EntityTransaction et= em.getTransaction();
                //		
                //		et.begin();
                //		
                //		em.persist(student);
                //		
                //		et.commit();
                        
                        
                        em.getTransaction().begin();
                        
                        em.persist(student);
                        
                        em.getTransaction().commit();
                        
                        
                        System.out.println("done...");
                        
                        
                        em.close();

                    }

                }


    Deleting a record
    --------------------

        Main.java : Delete operation
        ------------------------------


            public class Main {
                
                public static void main(String[] args) {
                    
                    EntityManagerFactory emf = Persistence.createEntityManagerFactory("studentUnit");
                    
                    EntityManager em = emf.createEntityManager();
                    
                
                    Scanner sc=new Scanner(System.in);
                    
                    System.out.println("Enter roll to delete ");
                    int roll=sc.nextInt();
                    
                    Student student = em.find(Student.class, roll);
                    
                    if(student != null){
                        
                        em.getTransaction().begin();
                        
                        em.remove(student);
                        
                        em.getTransaction().commit();
                        
                        
                        System.out.println("Student removed....");
                        
                    } else {
                        System.out.println("Student not found...");
                    }

                    em.close();
                    
                    System.out.println("done");
                    
                }

            }


    Updating a record
    -------------------

        Main.java : Update operation
        ------------------------------



            public class Main {
                
                public static void main(String[] args) {
                    
                    EntityManagerFactory emf=Persistence.createEntityManagerFactory("studentUnit");
                    
                    EntityManager em= emf.createEntityManager();
                    
                
                    Scanner sc=new Scanner(System.in);
                    
                    System.out.println("Enter roll to give grace marks ");
                    int roll=sc.nextInt();
                    
                    Student student=em.find(Student.class, roll); //if it returns the obj then the obj will be in p.state
                    
                    
                    if(student == null){
                        System.out.println("Student does not exist..");
                    }
                    else
                    {
                        
                        System.out.println("Enter the grace marks");
                        int marks=sc.nextInt();
                        
                        em.getTransaction().begin();
                        
                        student.setMarks(student.getMarks()+marks);
                        
                        em.getTransaction().commit();
                        
                        System.out.println("Marks is graced...");
                        
                    }
                    em.close();
                
                    System.out.println("done");
                    
                    
                }

            }


        -- In the above application we didn't call any update method, we just change the state of the persistence/entity  obj
        inside the transactional area, at the end of the tx, ORM engine will generate the update sql.

        -- This is known as the ORM s/w maintaining synchronization bt entity obj and the db table records.

        -- We have a method called merge() inside the EntityManager obj to update a record also.



    Life-cycle of persistence/entity object
    -----------------------------------------

        An entity obj has the 3 life-cycle state:-

            1. New state/transient state

            2. Persistence state/managed state

            3. Detached state


        1. New state/transient state
        ------------------------------

        -- If we create a object of persistence class and this class is not attached with the EM obj, then
        this stage is known as new state/transient state

            Student s = new Student(10,"ram",780);


        2. Persistence state
        ----------------------

        -- If a persistence class obj or Entity obj is associated with EM obj, then this obj will be in persistence state.

        Ex:-

            when we call a persist(-) method by supplying Student entity obj then at time student obj will be in persistence state

            or 

            when we call find() method and this method returns the Student obj, then that obj will also be in persistence state.

        Note : When an entity class obj is in persistence state, it is in-sync with the DB table, i.e.
        any change made on that obj inside the tx area will reflect to the table automatically.


        Ex:-

                Student s = new Student(150,"manoj",850); // here student obj is in 'Transient state'
                
                em.getTransaction().begin();
                
                em.persist(s); // here it is in the 'Persistence state'
                
                s.setMarks(900);
                
                em.getTransaction().commit();
		

        3. Detached state
        -------------------

        -- When we call  close() method   or call clear() method on the EM obj, then all the associated entity obj will be in detached state.

        -- In this stage the entity objs will not be in-sync with the table.



        Note : we have a merge() method in EM obj, when we call this method by supplying any detached object then that detached object will bring back in the persistence state.



        Ex:-

            Main.java
            -----------

                public class Main {
                    
                    public static void main(String[] args) {
                        
                        EntityManagerFactory emf=Persistence.createEntityManagerFactory("studentUnit");
                        
                        EntityManager em= emf.createEntityManager();
                        
                        Student s= em.find(Student.class, 20); //persistence state
                        
                        em.clear(); // Detached state
                        
                        em.getTransaction().begin();
                        
                        s.setMarks(500);
                    
                        // em.persist(s); // It will throw duplicate ID related exception

                        em.merge(s); // Persistence state, merge() : Insert/Update
                    
                        em.getTransaction().commit();
                        
                        em.close();	

                        System.out.println("done");

                    }

                }


        em.persist()
        em.find()------------>persistence state-----------em.close(), em.clear()--------->detached state---->em.merge()--->reflect in the table.

        -- After merge() method, we can not do modification on that object(it will not be reflected).







