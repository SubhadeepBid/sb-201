=================
| SB-201_DAY-02 |
=================


Layared Architecture in Java Based Business Application
---------------------------------------------------------

    1. Maintaining the business data in secure and easily retrival manner.

    -- The logic that we write to implement this part of business application is known as Data Accees Logic.

    2. Processing the data according to the business rule.

    -- The logic that we write to implement this part of business application is known as Business/Service logic.

    3. Presenting the data to the user in user-understandable format.

    -- The logic that we write to implement this part of business application is known as Presentation logic.


    -- The above 3 logics is required for almost every business application.

        class MyBusinessApplication {

            Data Access Logic  // fetch the account information from the DB

            Business Logic //calculating the Intreset to the balance

            Presentation Logic // display the information to the client

        }


    Note:- We can write all the 3 logics to develop a business application in one program/class itself, if we do so, the following problem we will face:-

        1. All the logics to develop the application will be mixed up with each other (no clear code seperation).

        2. Modification done in one logic may affect the other logic .

        3. Logics will depend upon each other so, parellal developement will not be possible.

        4. Testing each logic is also will become complex.


    -- To solve this problem, we divide a java based business application into 3 logical partition and each part we say as a layer :

        1. Presentation Layer(UI layer)

        2. Business Logic Layer (Service layer)

        3. Data Access Layer 


    -- A bussiness application will be divided into the logical partition depending upon the role played by each part.

    -- Lgical partition of a business application is known as layer.


        Presentation Layer 
        --------------------

            -- It is set of java classes, which are responsible for generating user input screen and response page(output screen) is knwon as PL.

            -- This layer provides the intraction with the end-user.


        Business Logic Layer/Service layer
        ------------------------------------

            -- Programatical implementation of business rule of a business organization is nothing but business logic.

            -- A collection of java classes whose methods have business logic to process the data according to the business rule is known as SL/BLL.



        Data Access Layer
        -------------------

            -- A set of java classes whose methods are exclusivly meant for performing CRUD operation with the DB server is known as DAL.

            using JDBC and DAO pattern


    **Note:- to communicate among these layers loose coupling should be promoted.




Developing Data Access Layer using ORM (Object Relational Mapping) approach
-----------------------------------------------------------------------------


    Java persistence
    ------------------

        -- The process of saving/storing java object's state into the DB s/w is known as java persistence..

        -- For small application we can store business data (java object state ) in the files using IO streams (serialization and deserailization approach).

        -- The logic that write to store java objects (which is holding business data) into the file using IO Streams is known as "IO stream based persistence logic".

        -- But in the realtime application, we store/save/persist the business data inside the database using JDBC

            public String saveStudentDetails(Student student)

        -- The logic that we write to store java objs data into the DB using JDBC is known as "JDBC based persistence logic"


    Limitation of JDBC based persistence logic
    --------------------------------------------

        1. JDBC can't store the java objects into the table directly, because SQL queires does not allows the java objectss as input, here we need to convert object data into the simple(atmoic) value to store them in a DB.

        2. JDBC code is the DB dependent code becoz it uses  DB s/w dependent queries. so our JDBC based persistence logic is not 100% portable across various DB s/w.

        3. JDBC code having boiler plate code problem (writing the same code except sql queries in multiple classes of our application again and again)..

        4. JDBC code throws lots of checked exceptions, programmer need to handle them.

        5. After the select operation, we get the ResultSet object. This RS object we can not transfer from one layer to another layer and to get the data from the ResultSet we need to now the structure of the ResultSet.

        6. There is no any caching and transaction management support is available in JDBC.

        etc ...

        
    --To overcome the above limitations we need to use ORM approach.


    ORM (Object - Relation Mapping) :  Java---->   Relation
    ---------------------------------------------------------

        --The process of mapping java classes with the DB tables, java class member variables with the DB table columns and 
        making the object of java class reperesents the DB table records having synchronization bt them is called a OR mapping.


            student_table(roll, name, marks);


            class Student {
                roll;
                name;
                marks
            }

            Student s1=new Student(10,"Ram",500);
            s1.setMarks(600);


            one Student object----------->one row of the  student table 


        - Here synchronization between object and table row is nothing but, the modification done in the object will reflect the DB table row and vise-versa.

        ***The logic that we write to store java objects into the DB using ORM approach is called as ORM based persistence logic.

        -- There are variaous ORM s/w are available in the market, these s/w will act as f/w software to perform ORM based persistence logic. 

            ex:-

            Hibernate ***
            Toplink
            Ibatis,
            Eclipselink
            etc...




    f/w software
    --------------

        -- It is a special type of s/w that provides abstraction layer on one or more existing core technology to simplyfy the process of application development.

        -- In java most of  the f/w softwares comes in the form of jar files(one or more jar file)

        -- In order to use/work on these f/w softwares we need to add those jar files in our classpath.

        -- While working with the ORM based persistence logic we write all the logics in the form of objects without any sql query support. due to which our logic will become DB s/w independent logic.

        -- In ORM based logic, the ORM s/w takes objects as an input and gives objects as an output so no need to convert object data to the primitive values.

        -- ORM s/w addresses the mismatches between object oriented representation of data and relational representation of data.

        class <----> tables

        class 

            1. Inheritence mismatches / IS-A mismatch

            2. Granularity mismatch / has-A mismatch

            3. Assotiation mismatch / table relation mismatch 

        i.e for processing and presenting the data, we represent the data in form of Object Oriented fashion
        whereas for storing the data we represnet the data in the form of relational fashion (in the tables)


            class Student{

            int roll,
            String name,
            int marks,
            Address addr;  // Has-A

            }

            class Address{
            (city,state,pin)

            }


        student table :- 

        roll int
        name varchar
        marks int 

        address table :-




        -- one obj of Student class will represent one row of student table

        -- ORM s/w addresses these mismathces in very easy manner.



    POJO class : java bean class
    ------------------------------

        Plain Old Java Object

        -- It is a normal java class not bounded with any technology or f/w s/ws i.e a java class that is not implementing or extending technology/framework API related classes or interfaces.

        -- A java  class that can be compiled without adding any extra jar files in the classpath are known as a POJO class.

        Note:- every java bean class is a POJO but every POJO is not a java bean.


        -- The following class comes under the category of POJO class

            class X implments Serializable, Runnable {

            }


        -- This class does not comes under POJO

            class X implements Servlet {

            }

        Java Bean : It is a pure encapsulated reusable component

            1. Class should be public

            2. If any data members are there they should be private

            3. For each data member we may have corresponding public getter and setter

            4. This class must have Zero Arguement Constructor

            5. May have (parameterized constructor, toString, hashCode(), equals() or any other business methods)

            6. This class should implement Serializable.
    

        public class X {
    
            public X(int x) {

            }

        } 

        -- Above class is a POJO class but it is not a java bean class because of parameterized constructor.


    POJI (Plain Old Java Interface)
    ---------------------------------

        interface X { // A POJI

        }

        interface X extends Servlet { // Not A POJI

        }



    ORM s/w features
    ------------------

        1. It can persist/store java obj to the DB directly.

        2. It supports POJO and POJI model

        3. It is a lightweight s/w becoz to excute the ORM based application we need not install any kind of servers.

        4. ORM persistance logic is DB independent. It is portable accross multiple DB s/ws. (beocz here we deal with object, not with the sql queires)

        5. Prevent the developers from boiler plate code coding to perform CRUD operarions.

        6. It generates fine tuned sql statements internally that improves the performance.

        7. It provides caching mechanism (maintaing one local copy to inhance the performance)

        8. It provides implicit connection pooling.

        9. Exception handling is optional because it throws unchecked exceptions.

        10. It has a special Query language called JPQL (JPA query language ) that totally depends upon the 'objects.   select eid,ename from employee.

            sql> select roll, name, marks from student;

            jpql> select roll, name, marks from Student;


        -- In sql we write the query in the term of tables and columns whereas in JPQL we write the Query in the term of classes and variables.




    ORM 

        Hibernate   "org.hibernate" Session, SessionFactory
        Toplink
        Ibatis
        EclipseLink  "org.eclipse"

    Each ORM has thier own API to perform ORM based persistance logic.

    JPA(Java Persistence API) : It is a standard API using which we can work with any kind of ORM s/w.

        Hibernate has thier own API also, 

        Hibernate : ORM ---> diff classes, diff methods, diff interfaces

        Ibatis : ORM ---> diff classes, diff methods, diff interfaces


        sun-microsystem : JPA API (standard API)

        --All the ORM s/w implements the JPA API.


        Hibernate : JPA API

        Ibatis:  JPA API

        -- JPA API comes in the form of "javax.persistence" package.

        -- From JPA 3.x this API comes in the form of jakarta.persistence package.



    Hibernate and JPA
    -------------------

        JPA is a API specification and Hibernate is its one of the famous implementation.

        Hibernate : It is one of the ORM based framework s/w. Other s/w are :- toplink,ibatis,etc..

        JPA (Java persistence API) : it is an open specification given by Oracle corp, to develop any ORM based s/w .

        JPA provides a standard API to work with any kind of ORM based s/w .

        JPA API belongs from "javax.persistence" package.

            -- Hibernate is one of the most frequently used JPA implementation

            -- HB provides its own API to develop ORM based persistence logic, if we use those API then
            our application will become vendor lock, i.e. we can not port our application accross multiple 
            ORM s/w. 

            --HB API comes in the form of "org.hibernate" package.


        Note : we get the JPA API, along with any ORM s/w, becoz all the ORM s/w implements 
        JPA specification.

        java.sql
        javax.sql   This JDBC API comes along with jdk installation


    JPA Application
    -----------------

        Any java application, that uses JPA API to perform persistnce operation (CRUD ) operation with 
        the DB s/w is called as JPA application.


    JPA architecture
    ------------------


    Entity class or persistence class
    -----------------------------------

        -- It is a class using which we map our table.

        -- If we are using the annotaion, then we need not map this class with the table inside the xml mapping file.

        -- An Entity class or persistence class is a java class that is developed corresponding to a table of DB.  

        -- This class has many instance variables should be there as same as columns in the corresponding table

        -- We should take Entity class as a POJO class.

        -- We need to provide mapping information with the table in this class only using annotaitons.

        Note : When we gives this persistance /Entity class obj to the ORM s/w, then ORM s/w will 
        decide the destination DB s/w based on the configuration done in a xml file which is called as hibernate-configuration file.


    Configuration file
    --------------------

        -- It is an xml file its name is "persistence.xml".

        -- This file must be created under src/META-INF folder in normal java application, where as in maven or gradle based application this file should be inside the src/main/resources/META-INF folder

        -- This file content will be used by ORM s/w (ORM engine) to locate the destination DB s/w.

        -- In this file generally 2 types of details we specify:-

            1.DB connection details

            2.ORM specific details (some instruction to the ORM s/w like dialect info,show_sql ,etc)


        Note : Generally we take this file 1 per DB basis.

        -- We should always create this configuration file by taking support of example applications inside 
        the project folder of hibernate download zip file or by taking the reffernce from the Google.
        ex:-

    persistence.xml
    -----------------
        <?xml version="1.0" encoding="UTF-8"?>

        <persistence xmlns="https://jakarta.ee/xml/ns/persistence"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="https://jakarta.ee/xml/ns/persistence https://jakarta.ee/xml/ns/persistence/persistence_3_0.xsd"
                    version="3.0">

            <persistence-unit name="studentUnit">

                <properties>

                    <property name="jakarta.persistence.jdbc.driver"
                        value="com.mysql.cj.jdbc.Driver" />
                        
                    <property name="jakarta.persistence.jdbc.url"
                        value="jdbc:mysql://localhost:3306/masaidb" />
                        
                    <property name="jakarta.persistence.jdbc.user" value="root" />
                    
                    <property name="jakarta.persistence.jdbc.password" value="root" />

                </properties>

            </persistence-unit>
            
        </persistence>


        The root tag is :

            <persistence> with some xml-namespace 

                -- The child tag of <persistence> tag is <persistence-unit>

                    -- This <persistence-unit> has 2 child tags:-

                        1. <class> tag : using which we specify the Entity class name(fully qualified name) that used 
                        annotations to map a table (optional from letest version of hibernate)

                        2. <properties> tag : using this tag we specify some configuration details to the ORM s/w


            Persistence-unit:- it is a logical name of the configuation of our DB and some other details.



    How to get the Hibernate s/w
    ------------------------------

    1. download the hiberate s/w (zip file) and add the required jar file in the classpath of our project

    2. maven approach:

        hibernate-core jar file

        persistence.xml : take this file from sample application or from hibernate docs..
        and modify it accordingly.


    ORM engine
    ------------

        -- It is a specialized s/w written in java that performs translation of jpa calls into the sql call by using mapping annotation and configuration file details and send the mapped sql to the DB s/w using JDBC.

        -- ORM engine is provided by any ORM s/w.


    Steps to devlop the JPA application
    -------------------------------------

        1. Create a maven project(change the java version) and add the hibernate-core dependency to the pom.xml.

        2. Add JDBC driver related dependency to the pom.xml

        3. Create a folder called "META-INF" inside src/main/resources folder, and create the "persistence.xml" file inside this folder by taking reference from Hibernate docs or from google.

            Example:

                <?xml version="1.0" encoding="UTF-8"?>

                <persistence xmlns="https://jakarta.ee/xml/ns/persistence"
                            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                            xsi:schemaLocation="https://jakarta.ee/xml/ns/persistence https://jakarta.ee/xml/ns/persistence/persistence_3_0.xsd"
                            version="3.0">

                    <persistence-unit name="studentUnit">

                        <properties>

                            <property name="jakarta.persistence.jdbc.driver"
                                value="com.mysql.cj.jdbc.Driver" />
                                
                            <property name="jakarta.persistence.jdbc.url"
                                value="jdbc:mysql://localhost:3306/masaidb" />
                                
                            <property name="jakarta.persistence.jdbc.user" value="root" />
                            
                            <property name="jakarta.persistence.jdbc.password" value="root" />

                        </properties>

                    </persistence-unit>
                    
                </persistence>

        4. Create as many Entity/Persistence classes as there r tables in the DB, apply the at least 2 annotations to these classes 


            @Entity : on the top of the class
            @Id  : on the top of PK mapped variable

            -- If we apply above 2 annotations then our java bean class will become Entity or Persistence class.

            -- Inside these classes, we need to take variable corresponding to the columns of the tables.

        5. Create a client application and activate ORM engine by using JPA API related following classes and interface and perform the DB operations.

            1. Persistence class 

            2. EntityManagerFactory

            3. EntityManager


            -- If we use Hibernate core API then we need to use 

                Configuration class

                SessionFactory(I)

                Session(I)


            example :


                Student.java:  // Entity class 
                ----------------
                package com.masai;

                import javax.persistence.Entity;
                import javax.persistence.Id;

                @Entity
                public class Student {

                    @Id
                    private int roll;
                    
                    private int marks;
                    private String name;
                    
                    public Student() {
                        // TODO Auto-generated constructor stub
                    }

                    public Student(int roll, String name, int marks) {
                        super();
                        this.roll = roll;
                        this.name = name;
                        this.marks = marks;
                    }

                    public int getRoll() {
                        return roll;
                    }

                    public void setRoll(int roll) {
                        this.roll = roll;
                    }

                    public String getName() {
                        return name;
                    }

                    public void setName(String name) {
                        this.name = name;
                    }

                    public int getMarks() {
                        return marks;
                    }

                    public void setMarks(int marks) {
                        this.marks = marks;
                    }

                    @Override
                    public String toString() {
                        return "Student [roll=" + roll + ", name=" + name + ", marks=" + marks + "]";
                    }
                    
                }

                Demo.java:
                -------------

                package com.masai;

                import javax.persistence.EntityManager;
                import javax.persistence.EntityManagerFactory;
                import javax.persistence.Persistence;

                public class Demo {

                    public static void main(String[] args) {
                        
                        EntityManagerFactory emf= Persistence.createEntityManagerFactory("studentUnit");
                        
                        
                        EntityManager em= emf.createEntityManager();
                        
                        
                        Student student= em.find(Student.class, 20);
                        
                        if(student != null)
                            System.out.println(student);
                        else
                            System.out.println("Student does not exist");
                        
                        em.close();
                        

                    }

                }


            -- To get the Object from the DB we need to call :- find(--) method of EM object

                This find(--) method takes 2 parameter 

                    1. The Classname of the Object which we want,

                    2. The ID value for which we want the object.


            Note:- when we call createEntityManagerFactory(-) method by suppliying persistence-unit name on the Persistence class, we will get the EntityManagerFactory object.

                -- This method loads the "persistence.xml" file into the memory

                -- EntityManagerFactory obj should be only one per application per DB.

            This EMF obj contains :-

                connection pool (readly available some JDBC connection obj)

                some meta information


            -- This EMF is a heavy weight object.

            -- By using this EMF class only we create the EntityManager object.

            -- EMF is a heavy weight object, it should be one per application

            EntityManager em = emf.createEntityManager();
 
            Note:- inside every DAO method(for every use case) we need to get the EntityManager obj
            --after performing the DB opeation for that use-case we should close the EM obj. 

            EM should be one per use-case (one per DAO method)


            JPA application ----------------->EntityManager(I) --------------------->ORM engine ------>JDBC------------>DB s/w
